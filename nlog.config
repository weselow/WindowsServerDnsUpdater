<?xml version="1.0" encoding="utf-8" ?>
<!-- XSD manual extracted from package NLog.Schema: https://www.nuget.org/packages/NLog.Schema-->
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Info"
      internalLogFile="${basedir}/_logs/nlog-internal-AspNetCore.txt">

  <!-- enable asp.net core layout renderers -->
  <extensions>
    <add assembly="NLog.Web.AspNetCore"/>
    <add assembly="NLog.Targets.Seq"/>
    <add assembly="Microsoft.Data.Sqlite"/>
    <add assembly="NLog.Database"/>
  </extensions>

  <!-- the targets to write to -->
  <targets async="true">    
    <target xsi:type="Debugger" name="debugger" layout="== NLOG: ${logger}::${message}">
    </target>
   
    <target name="seq"
            xsi:type="BufferingWrapper"
            bufferSize="1000"
            flushTimeout="5000"
            slidingTimeout="false">
      <target xsi:type="Seq" serverUrl="http://100.77.246.15:5341" apiKey="qwC5tKnanm1DIxZ712Ay" >
        <property name="MachineName" value="${machinename}" />
        <property name="Source" value="${logger}" />
        <property name="Project" value="WindowsServerDNSUpdate" />
      </target>
    </target>

    <target name="database" xsi:type="Database"
            dbProvider="Microsoft.Data.Sqlite.SqliteConnection, Microsoft.Data.Sqlite"
            connectionString="${configsetting:name=ConnectionStrings.SqliteLogs}"
            commandText="INSERT INTO LogEntries (Time, Message, Logger, Level, Exception) 
                         VALUES (@time, @message, @logger, @level, @exception)"
            commandType="Text"
            installConnectionString="${configsetting:name=ConnectionStrings.SqliteLogs}"
    >

      <!-- Команда для создания таблицы, если она не существует -->
      <install-command ignoreFailures="false"
                       commandType="Text"
                       connectionString="${configsetting:name=ConnectionStrings.SqliteLogs}"
                       text="
                            CREATE TABLE IF NOT EXISTS LogEntries (
                                Id INTEGER PRIMARY KEY AUTOINCREMENT,
                                Time TEXT NOT NULL,
                                Message TEXT NOT NULL,
                                Logger TEXT NOT NULL,
                                Level TEXT NOT NULL,
                                Exception TEXT
                            );"/>

      <!-- Параметры для вставки данных -->
      <parameter name="@time" layout="${longdate}" />
      <parameter name="@message" layout="${message}" />
      <parameter name="@logger" layout="${logger}" />
      <parameter name="@level" layout="${level}" />
      <parameter name="@exception" layout="${exception:format=tostring}" />
    </target>
  </targets>

  <!-- rules to map from logger name to target -->
  <rules>
    <!--Output hosting lifetime messages to console target for faster startup detection -->
    <!--<logger name="Microsoft.Hosting.Lifetime" minlevel="Info" writeTo="lifetimeConsole, ownFile-web" final="true" />-->

    <!--Skip non-critical Microsoft logs and so log only own logs (BlackHole) -->
    <logger name="Microsoft.*" maxlevel="Info" final="true" />

    <logger name="System.Net.Http.*" maxlevel="Info" final="true" />     

    <logger name="*" minlevel="Debug" writeTo="seq" />    

    <logger name="*" minlevel="Debug" writeTo="debugger" />

    <logger name="*" minlevel="Debug" writeTo="database" />
  </rules>

</nlog>